[
  {
    "full_prompt_text": "Spec Prompt for system/architecture/overview.md and system/architecture/patterns/context-frames.md\n\nHigh-Level Objective:\n- Update the overall architecture documentation to clearly describe how atomic task template matching is performed using associative matching tasks.\n\nMid-Level Objectives:\n- In the overview document, add a dedicated section (or bullet point) that explains that only atomic tasks have templates, and that matching is performed heuristically based on fixed input/output signatures. Mention that the system selects the highest-scoring candidate and that an optional 'disable context' flag is available.\n- In the context-frames document, add a subsection (or table) detailing the available context inheritance modes (full, subset, and a disable option) and include a diagram showing the difference between standard inheritance and when context is disabled.\n\nImplementation Notes:\n- Insert a mermaid flowchart in the overview document to illustrate the call chain from user input through context generation and associative matching to template selection.\n- Cross-reference the new context inheritance options with the decisions documents (e.g., ADR 002 and ADR 005) to ensure consistency.\n- Use clear bullet points and headings to separate the discussion of template matching and context handling.\n\nBeginning Context:\n- Existing files: system/architecture/overview.md, system/architecture/patterns/context-frames.md\n\nEnding Context:\n- Updated files with new sections and diagrams detailing atomic task template matching and context inheritance/disabling.\n\nLow-Level Tasks:\n1. Update system/architecture/overview.md:\n   - ADD a new section or bullet under 'Key Patterns' explaining that only atomic tasks have templates. Describe that matching is done heuristically and the highest-scoring candidate is selected, with an optional disable context flag.\n   - INSERT a mermaid flowchart diagram illustrating the call chain for associative matching.\n\n2. Update system/architecture/patterns/context-frames.md:\n   - ADD a subsection that defines the available context inheritance modes: full, subset, and a disable option. Explain what happens when context is disabled.\n   - INSERT a diagram showing two flows: one with standard inheritance and one where no parent context is passed (disable context).\n\nPlease update the two files accordingly.",
    "files": [
      "system/architecture/overview.md",
      "system/architecture/patterns/context-frames.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for system/architecture/patterns/errors.md and system/architecture/decisions/002-context-management.md\n\nHigh-Level Objective:\n- Enhance the error handling and context management documentation to reflect the new handling for associative matching failures and the option to disable context.\n\nMid-Level Objectives:\n- In the errors.md document, add clarification under the recovery process that if an associative matching task fails (e.g., insufficient context retrieval), the system will automatically trigger a retry. Include a brief flow diagram to illustrate this error path.\n- In the 002-context-management.md document, add a new decision item explaining that atomic tasks (and associative matching tasks) can now use a dedicated flag to completely disable context inheritance, and clarify that the same inheritance semantics (full, subset, none) apply uniformly.\n\nImplementation Notes:\n- Add a new bullet point or subsection in 002-context-management.md that explicitly states the availability of a disable context option.\n- Enhance errors.md with a small diagram showing the error detection and automatic retry flow for associative matching failures.\n\nBeginning Context:\n- Existing files: system/architecture/patterns/errors.md, system/architecture/decisions/002-context-management.md\n\nEnding Context:\n- Updated error handling documentation and context management decision files that incorporate the automatic retry on failure and the disable context option.\n\nLow-Level Tasks:\n1. Update system/architecture/patterns/errors.md:\n   - ADD a bullet under the Recovery Process section stating that associative matching failures trigger an automatic retry. Insert a diagram outlining this error flow.\n\n2. Update system/architecture/decisions/002-context-management.md:\n   - ADD a new decision item or bullet point that specifies the option to disable context entirely for atomic and associative matching tasks using a dedicated flag.\n   - Ensure that examples and discussion clearly show that the same inheritance modes (full, subset, none) apply.\n\nPlease update the two files accordingly.",
    "files": [
      "system/architecture/patterns/errors.md",
      "system/architecture/decisions/002-context-management.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for system/architecture/decisions/005-context-handling.md and system/architecture/questions.md\n\nHigh-Level Objective:\n- Update context handling decisions and open questions documentation to incorporate the new behavior regarding placeholder substitution, success scoring, and automatic retry on associative matching failures.\n\nMid-Level Objectives:\n- In 005-context-handling.md, add a paragraph clarifying that placeholder substitutions are completed before execution for all tasks (including associative matching tasks) and that the 'notes' field may now contain an optional success score for future adaptive scoring. Also, emphasize that failures in associative matching will automatically trigger a retry.\n- In the questions.md file, update or remove questions that are now resolved (e.g., operator-specific matching concerns and versioning issues) and add a note that for MVP, matching is uniform across atomic tasks with no versioning.\n\nImplementation Notes:\n- Insert a diagram in 005-context-handling.md that shows the flow from placeholder substitution through context handling, matching, and extraction of a success score.\n- Revise open questions to clearly state that for MVP, only uniform matching is supported and that adaptivity via the success score is planned for future versions.\n\nBeginning Context:\n- Existing files: system/architecture/decisions/005-context-handling.md, system/architecture/questions.md\n\nEnding Context:\n- Updated decisions and open questions documents that reflect the current design decisions regarding context handling and template matching.\n\nLow-Level Tasks:\n1. Update system/architecture/decisions/005-context-handling.md:\n   - ADD a paragraph that explains placeholder substitution is completed before task execution and that the 'notes' section may include an optional success score. Emphasize automatic retry on matching failures.\n   - INSERT a diagram illustrating the complete context handling flow.\n\n2. Update system/architecture/questions.md:\n   - REMOVE or reword questions related to operator-specific matching and versioning. Add a statement clarifying that MVP uses uniform matching and that adaptive scoring via success scores is deferred to future versions.\n\nPlease update the two files accordingly.",
    "files": [
      "system/architecture/decisions/005-context-handling.md",
      "system/architecture/questions.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/task-system/spec/types.md and components/task-system/impl/design.md\n\nHigh-Level Objective:\n- Update the Task System’s type definitions and design documentation to reflect the new details about atomic task templates, associative matching, and the optional success score in the 'notes' field.\n\nMid-Level Objectives:\n- In types.md, update the description of the 'notes' field in the TaskResult type to mention the optional success score that will be aggregated for adaptive matching. Emphasize that only atomic tasks have templates and that composite tasks are formed by sequencing atomic tasks.\n- In design.md, create a new subsection titled 'Task/Template Matching' that describes the heuristic associative matching process, explains that the system selects the highest-scoring candidate, and outlines the new disable context option. Include a detailed mermaid flowchart of the call chain from user input to template selection.\n\nImplementation Notes:\n- Use precise language to define the expected behavior of the matching process and include examples where helpful.\n- Ensure that the design section is clearly organized with headings and subheadings for matching, context disabling, and future adaptive behavior.\n\nBeginning Context:\n- Existing files: components/task-system/spec/types.md, components/task-system/impl/design.md\n\nEnding Context:\n- Updated type definitions and design documentation that incorporate the new template matching details, disable context option, and success score mechanism.\n\nLow-Level Tasks:\n1. Update components/task-system/spec/types.md:\n   - MODIFY the 'notes' field documentation to include an optional success score and note that only atomic tasks have templates.\n   - Optionally add small JSON examples for ContextGenerationInput and AssociativeMatchResult.\n\n2. Update components/task-system/impl/design.md:\n   - ADD a new subsection 'Task/Template Matching' that explains the associative matching process, describes the disable context option, and specifies that the highest-scoring candidate is chosen.\n   - INSERT a mermaid flowchart diagram that illustrates the call chain for matching.\n\nPlease update the two files accordingly.",
    "files": [
      "components/task-system/spec/types.md",
      "components/task-system/impl/design.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/task-system/spec/behaviors.md and components/task-system/spec/interfaces.md\n\nHigh-Level Objective:\n- Enhance the Task System’s behavior and interface documentation to clarify that matching is only applicable to atomic task templates, and to formalize the input/output contracts for associative matching tasks.\n\nMid-Level Objectives:\n- In behaviors.md, expand the 'Task Template Matching' section to state that associative matching is heuristic, uniform across all atomic tasks, and that only the highest-scoring candidate is selected. Also note that if the 'disable context' option is enabled, inherited context is omitted, and that the 'notes' field may include an optional success score.\n- In interfaces.md, add clarifying comments in the API documentation for methods such as findMatchingTasks. Formalize and provide examples for the structures of ContextGenerationInput and AssociativeMatchResult.\n\nImplementation Notes:\n- Ensure that the descriptions in both files are consistent with the updated types and design documents.\n- Use clear examples and, if possible, small code snippets to illustrate the expected input and output formats.\n\nBeginning Context:\n- Existing files: components/task-system/spec/behaviors.md, components/task-system/spec/interfaces.md\n\nEnding Context:\n- Updated behavior and interface documentation that clearly defines the matching process and the associated data structures.\n\nLow-Level Tasks:\n1. Update components/task-system/spec/behaviors.md:\n   - ADD bullet points under 'Task Template Matching' to document the heuristic, uniform matching strategy, the selection of the highest-scoring candidate, and the effect of the disable context flag.\n   - INSERT a diagram summarizing the behavioral flow for matching.\n\n2. Update components/task-system/spec/interfaces.md:\n   - ADD clarifying comments to the findMatchingTasks method, specifying that matching applies only to atomic tasks and that input/output types are defined by ContextGenerationInput and AssociativeMatchResult.\n   - FORMALIZE these type definitions with examples.\n\nPlease update the two files accordingly.",
    "files": [
      "components/task-system/spec/behaviors.md",
      "components/task-system/spec/interfaces.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/evaluator/README.md and TODOS.md\n\nHigh-Level Objective:\n- Update the Evaluator documentation and the overall TODO list to reflect the new design decisions regarding associative matching, context disabling, and success scoring for adaptive behavior.\n\nMid-Level Objectives:\n- In components/evaluator/README.md, add a new section (or update an existing one) on 'Context and Template Matching' that explains that placeholder substitutions occur before task execution, that associative matching tasks follow the same rules, and that an optional success score in the 'notes' field is now part of the design. Include a diagram showing the Evaluator's role in this process.\n- In TODOS.md, update and consolidate all items related to template matching and context handling. Add items to document the new 'disable context' option and the success score feature, and remove any outdated items regarding versioning or operator-specific matching.\n\nImplementation Notes:\n- Ensure that the evaluator documentation cross-references the relevant ADRs (e.g., 002 and 005) for context handling.\n- The TODOS.md file should be reviewed for outdated items and revised to reflect the current design.\n\nBeginning Context:\n- Existing files: components/evaluator/README.md, TODOS.md\n\nEnding Context:\n- Updated Evaluator documentation that includes clear sections and diagrams on matching and context handling, and a cleaned-up TODOS.md that accurately reflects the current state of the design.\n\nLow-Level Tasks:\n1. Update components/evaluator/README.md:\n   - ADD a new section titled 'Context and Template Matching' that explains the pre-execution placeholder substitution, uniform associative matching for atomic tasks, and the use of an optional success score in the 'notes' field.\n   - INSERT a diagram illustrating the Evaluator's process in retrieving context and selecting the appropriate template.\n\n2. Update TODOS.md:\n   - REVIEW and update all items related to template matching, context disabling, and success score aggregation. Remove any obsolete items related to versioning and operator-specific matching rules.\n\nPlease update the two files accordingly.",
    "files": [
      "components/evaluator/README.md",
      "TODOS.md"
    ]
  }
]
