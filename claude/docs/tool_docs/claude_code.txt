CLAUDE CODE
Claude Code overview
Learn about Claude Code, an agentic coding tool made by Anthropic. Currently in beta as a research preview.

Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster through natural language commands. By integrating directly with your development environment, Claude Code streamlines your workflow without requiring additional servers or complex setup.

Claude Code’s key capabilities include:

Editing files and fixing bugs across your codebase
Answering questions about your code’s architecture and logic
Executing and fixing tests, linting, and other commands
Searching through git history, resolving merge conflicts, and creating commits and PRs
Research preview

Code is in beta as a research preview. We’re gathering developer feedback on AI collaboration preferences, which workflows benefit most from AI assistance, and how to improve the agent experience.

This early version will evolve based on user feedback. We plan to enhance tool execution reliability, support for long-running commands, terminal rendering, and Claude’s self-knowledge of its capabilities in the coming weeks.

Report bugs directly with the /bug command or through our GitHub repository.

​
Before you begin
​
Check system requirements
Operating Systems: macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows via WSL
Hardware: 4GB RAM minimum
Software:
Node.js 18+
git 2.23+ (optional)
GitHub or GitLab CLI for PR workflows (optional)
ripgrep (rg) for enhanced file search (optional)
Network: Internet connection required for authentication and AI processing
​
Install and authenticate
Claude Code is currently at capacity. Join the waitlist at https://console.anthropic.com/code/welcome and we will email you when you’ve been granted access.

1
Install Claude Code

Run in your terminal: npm install -g @anthropic-ai/claude-code

2
Navigate to your project

cd your-project-directory
3
Start Claude Code

Run claude to launch
4
Complete authentication

Follow the one-time OAuth process with your Console account. You’ll need active billing at console.anthropic.com.

​
Core features and workflows
Claude Code operates directly in your terminal, understanding your project context and taking real actions. No need to manually add files to context - Claude will explore your codebase as needed. Claude Code uses claude-3-7-sonnet-20250219 by default.

​
Security and privacy by design
Your code’s security is paramount. Claude Code’s architecture ensures:

Direct API connection: Your queries go straight to Anthropic’s API without intermediate servers
Works where you work: Operates directly in your terminal
Understands context: Maintains awareness of your entire project structure
Takes action: Performs real operations like editing files and creating commits
​
From questions to solutions in seconds

# Ask questions about your codebase
$ claude
> how does our authentication system work?

# Create a commit with one command
$ claude commit

# Fix issues across multiple files
$ claude "fix the type errors in the auth module"
​
Initialize your project
For first-time users, we recommend:

Start Claude Code with claude
Try a simple command like summarize this project
Generate a CLAUDE.md project guide with /init
Ask Claude to commit the generated CLAUDE.md file to your repository
​
Use Claude Code for common tasks
Claude Code operates directly in your terminal, understanding your project context and taking real actions. No need to manually add files to context - Claude will explore your codebase as needed.

​
Understand unfamiliar code

> what does the payment processing system do?
> find where user permissions are checked
> explain how the caching layer works
​
Automate Git operations

> commit my changes
> create a pr
> which commit added tests for markdown back in December?
> rebase on main and resolve any merge conflicts
​
Edit code intelligently

> add input validation to the signup form
> refactor the logger to use the new API
> fix the race condition in the worker queue
​
Test and debug your code

> run tests for the auth module and fix failures
> find and fix security vulnerabilities
> explain why this test is failing
​
Encourage deeper thinking
For complex problems, explicitly ask Claude to think more deeply:


> think about how we should architect the new payment service
> think hard about the edge cases in our authentication flow
​
Control Claude Code with commands
​
CLI commands
Command	Description	Example
claude	Start interactive REPL	$ claude
claude "query"	Start REPL with initial prompt	$ claude "explain this project"
claude -p "query"	Run one-off query, then exit	$ claude -p "explain this function"
cat file | claude -p "query"	Process piped content	$ cat logs.txt | claude -p "explain"
claude config	Configure settings	$ claude config set --global theme dark
claude update	Update to latest version	$ claude update
claude mcp	Configure Model Context Protocol servers	$ claude mcp add pyright_lsp
CLI flags:

--print: Print response without interactive mode
--verbose: Enable verbose logging
--dangerously-skip-permissions: Skip permission prompts (only in Docker containers without internet)
​
Slash commands
Control Claude’s behavior within a session:

Command	Purpose
/bug	Report bugs (sends conversation to Anthropic)
/clear	Clear conversation history
/compact	Compact conversation to save context space
/config	View/modify configuration
/cost	Show token usage statistics
/doctor	Checks the health of your Claude Code installation
/help	Get usage help
/init	Initialize project with CLAUDE.md guide
/login	Switch Anthropic accounts
/logout	Sign out from your Anthropic account
/pr_comments	View pull request comments
/review	Request code review
/terminal-setup	Install Shift+Enter key binding for newlines (iTerm2 and VSCode only)
​
Manage permissions and security
Claude Code uses a tiered permission system to balance power and safety:

Tool Type	Example	Approval Required	”Yes, don’t ask again” Behavior
Read-only	File reads, LS, Grep	No	N/A
Bash Commands	Shell execution	Yes	Permanently per project directory and command
File Modification	Edit/write files	Yes	Until session end
​
Tools available to Claude
Claude Code has access to a set of powerful tools that help it understand and modify your codebase:

Tool	Description	Permission Required
AgentTool	Runs a sub-agent to handle complex, multi-step tasks	No
BashTool	Executes shell commands in your environment	Yes
GlobTool	Finds files based on pattern matching	No
GrepTool	Searches for patterns in file contents	No
LSTool	Lists files and directories	No
FileReadTool	Reads the contents of files	No
FileEditTool	Makes targeted edits to specific files	Yes
FileWriteTool	Creates or overwrites files	Yes
NotebookReadTool	Reads and displays Jupyter notebook contents	No
NotebookEditTool	Modifies Jupyter notebook cells	Yes
​
Protect against prompt injection
Prompt injection is a technique where an attacker attempts to override or manipulate an AI assistant’s instructions by inserting malicious text. Claude Code includes several safeguards against these attacks:

Permission system: Sensitive operations require explicit approval
Context-aware analysis: Detects potentially harmful instructions by analyzing the full request
Input sanitization: Prevents command injection by processing user inputs
Command blocklist: Blocks risky commands that fetch arbitrary content from the web like curl and wget
Best practices for working with untrusted content:

Review suggested commands before approval
Avoid piping untrusted content directly to Claude
Verify proposed changes to critical files
Report suspicious behavior with /bug
While these protections significantly reduce risk, no system is completely immune to all attacks. Always maintain good security practices when working with any AI tool.

​
Configure network access
Claude Code requires access to:

api.anthropic.com
statsig.anthropic.com
sentry.io
Allowlist these URLs when using Claude Code in containerized environments.

​
Optimize your terminal setup and configure your environment
Claude Code works best when your terminal is properly configured. Follow these guidelines to optimize your experience.

Supported shells:

Bash
Zsh (Fish shell not currently supported)
​
Themes and appearance
Claude cannot control the theme of your terminal. That’s handled by your terminal application. You can match Claude Code’s theme to your terminal during onboarding or any time via the /config command

​
Line breaks
You have several options for entering linebreaks into Claude Code:

Quick escape: Type \ followed by Enter to create a newline
Keyboard shortcut: Press Option+Enter (Meta+Enter) with proper configuration
To set up Option+Enter in your terminal:

For Mac Terminal.app:

Open Settings → Profiles → Keyboard
Check “Use Option as Meta Key”
For iTerm2 and VSCode terminal:

Open Settings → Profiles → Keys
Under General, set Left/Right Option key to “Esc+”
Tip for iTerm2 and VSCode users: Run /terminal-setup within Claude Code to automatically configure Shift+Enter as a more intuitive alternative.

​
Notification setup
Never miss when Claude completes a task with proper notification configuration:

​
Terminal bell notifications
Enable sound alerts when tasks complete:


claude config set --global preferredNotifChannel terminal_bell
For macOS users: Don’t forget to enable notification permissions in System Settings → Notifications → [Your Terminal App].

​
iTerm 2 system notifications
For iTerm 2 alerts when tasks complete:

Open iTerm 2 Preferences
Navigate to Profiles → Terminal
Enable “Silence bell” and “Send notification when idle”
Set your preferred notification delay
Note that these notifications are specific to iTerm 2 and not available in the default macOS Terminal.

​
Handling large inputs
When working with extensive code or long instructions:

Avoid direct pasting: Claude Code may struggle with very long pasted content
Use file-based workflows: Write content to a file and ask Claude to read it
Be aware of VS Code limitations: The VS Code terminal is particularly prone to truncating long pastes
By configuring these settings, you’ll create a smoother, more efficient workflow with Claude Code.

​
Manage costs effectively
Claude Code consumes tokens for each interaction. Typical usage costs range from $5-10 per developer per day, but can exceed $100 per hour during intensive use.

​
Track your costs
Use /cost to see current session usage
Review cost summary displayed when exiting
Check historical usage in Anthropic Console
Set Spend limits
​
Reduce token usage
Compact conversations: Use /compact when context gets large
Write specific queries: Avoid vague requests that trigger unnecessary scanning
Break down complex tasks: Split large tasks into focused interactions
Clear history between tasks: Use /clear to reset context
Costs can vary significantly based on:

Size of codebase being analyzed
Complexity of queries
Number of files being searched or modified
Length of conversation history
Frequency of compacting conversations
For team deployments, we recommend starting with a small pilot group to establish usage patterns before wider rollout.

​
Use with third-party APIs
​
Connect to Amazon Bedrock

CLAUDE_CODE_USE_BEDROCK=1
ANTHROPIC_MODEL='us.anthropic.claude-3-7-sonnet-20250219-v1:0'
If you don’t have prompt caching enabled, also set:


DISABLE_PROMPT_CACHING=1
Requires standard AWS SDK credentials (e.g., ~/.aws/credentials or relevant environment variables like AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY). Contact Amazon Bedrock for prompt caching for reduced costs and higher rate limits.

​
Connect to Google Vertex AI

CLAUDE_CODE_USE_VERTEX=1
CLOUD_ML_REGION=us-east5
ANTHROPIC_VERTEX_PROJECT_ID=your-project-id
Claude Code on Vertex AI currently only supports the us-east5 region. Make sure your project has quota allocated in this specific region.

Requires standard GCP credentials configured through google-auth-library. For the best experience, contact Google for heightened rate limits.

​
Development container reference implementation
Claude Code provides a development container configuration for teams that need consistent, secure environments. This preconfigured devcontainer setup works seamlessly with VS Code’s Remote - Containers extension and similar tools.

The container’s enhanced security measures (isolation and firewall rules) allow you to run claude --dangerously-skip-permissions to bypass permission prompts for unattended operation. We’ve included a reference implementation that you can customize for your needs.

While the devcontainer provides substantial protections, no system is completely immune to all attacks. Always maintain good security practices and monitor Claude’s activities.

​
Key features
Production-ready Node.js: Built on Node.js 20 with essential development dependencies
Security by design: Custom firewall restricting network access to only necessary services
Developer-friendly tools: Includes git, ZSH with productivity enhancements, fzf, and more
Seamless VS Code integration: Pre-configured extensions and optimized settings
Session persistence: Preserves command history and configurations between container restarts
Works everywhere: Compatible with macOS, Windows, and Linux development environments
​
Getting started in 4 steps
Install VS Code and the Remote - Containers extension
Clone the Claude Code reference implementation repository
Open the repository in VS Code
When prompted, click “Reopen in Container” (or use Command Palette: Cmd+Shift+P → “Remote-Containers: Reopen in Container”)
​
Configuration breakdown
The devcontainer setup consists of three primary components:

devcontainer.json: Controls container settings, extensions, and volume mounts
Dockerfile: Defines the container image and installed tools
init-firewall.sh: Establishes network security rules
​
Security features
The container implements a multi-layered security approach with its firewall configuration:

Precise access control: Restricts outbound connections to whitelisted domains only (npm registry, GitHub, Anthropic API, etc.)
Default-deny policy: Blocks all other external network access
Startup verification: Validates firewall rules when the container initializes
Isolation: Creates a secure development environment separated from your main system
​
Customization options
The devcontainer configuration is designed to be adaptable to your needs:

Add or remove VS Code extensions based on your workflow
Modify resource allocations for different hardware environments
Adjust network access permissions
Customize shell configurations and developer tooling
​
Next steps
Claude Code tutorials
Step-by-step guides for common tasks

Reference implementation
Clone our development container reference implementation.

​
License and data usage
Claude Code is provided as a Beta research preview under Anthropic’s Commercial Terms of Service.

​
How we use your data
We aim to be fully transparent about how we use your data. We may use feedback to improve our products and services, but we will not train generative models using your feedback from Claude Code. Given their potentially sensitive nature, we store user feedback transcripts for only 30 days.

​
Feedback transcripts
If you choose to send us feedback about Claude Code, such as transcripts of your usage, Anthropic may use that feedback to debug related issues and improve Claude Code’s functionality (e.g., to reduce the risk of similar bugs occurring in the future). We will not train generative models using this feedback.
